// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package models

import (
	"context"
	"time"
)

const getAgentList = `-- name: GetAgentList :many
SELECT 
	agent.id id,
	agent.name name,
	agent.enable enable,
	agent.type_id type_id,
	agent_type.name type_name,
	agent.event_max_age event_max_age,
	agent.prop_json_str prop_json_str,
	agent.create_time create_time
FROM (
	agent INNER JOIN agent_type
	ON agent.type_id = agent_type.id
)
WHERE agent.deleted = 0 AND
	agent_type.deleted = 0
`

type GetAgentListRow struct {
	ID          int32
	Name        string
	Enable      int32
	TypeID      int32
	TypeName    string
	EventMaxAge int64
	PropJsonStr string
	CreateTime  time.Time
}

func (q *Queries) GetAgentList(ctx context.Context) ([]GetAgentListRow, error) {
	rows, err := q.db.QueryContext(ctx, getAgentList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAgentListRow
	for rows.Next() {
		var i GetAgentListRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Enable,
			&i.TypeID,
			&i.TypeName,
			&i.EventMaxAge,
			&i.PropJsonStr,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
