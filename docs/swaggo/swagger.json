{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample server celler server.",
        "title": "Swagger Example API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "43.142.105.98:8080",
    "basePath": "/",
    "paths": {
        "/agent": {
            "get": {
                "description": "get agents",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "List agents",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "agent id. Don't include in request if you don't specify a id",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of agents in a page",
                        "name": "number",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page sequence number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swaggo.GetAgentListResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Create new agents. Also support application/json",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "New agents",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "enable the agent",
                        "name": "enable",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "agent type id",
                        "name": "typeId",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "name of the agent",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "description",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "whether keep the event forever",
                        "name": "eventForever",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "event max age in nanosecond count",
                        "name": "eventMaxAge",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "props used by specific agent type in json",
                        "name": "propJsonStr",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swaggo.NewAgentResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Update agents with specific id. Also support application/json",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Update agents",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "agent id",
                        "name": "id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "enable the agent",
                        "name": "enable",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "name of the agent",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "description",
                        "name": "description",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "whether keep the event forever",
                        "name": "eventForever",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "event max age in timestamp",
                        "name": "eventMaxAge",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "props used by specific agent type in json",
                        "name": "propJsonStr",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swaggo.StateInfo"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete agents",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Delete agents",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "agent id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swaggo.StateInfo"
                        }
                    }
                }
            }
        },
        "/agent-relation": {
            "get": {
                "description": "get all relations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relations"
                ],
                "summary": "List All Relations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swaggo.GetRelationsResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Set relations of an agent with specific id. Also support x-www-form-urlencoded",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relations"
                ],
                "summary": "Set Agent Relations",
                "parameters": [
                    {
                        "description": "all relations of an agent",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.setAgentRelationParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swaggo.GetEventListResponse"
                        }
                    }
                }
            }
        },
        "/agent-relation/for-edit": {
            "get": {
                "description": "Get Relations By Agent ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "relations"
                ],
                "summary": "Get Relations By Agent ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "src agent id. Don't include in request if you don't specify it",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swaggo.GetRelationsForEditResp"
                        }
                    }
                }
            }
        },
        "/agent/dry-run": {
            "post": {
                "description": "Dry run",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "Dry run",
                "parameters": [
                    {
                        "description": "agent and event",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.dryRunParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swaggo.DryRunResponse"
                        }
                    }
                }
            }
        },
        "/agent/relationable": {
            "get": {
                "description": "List agents available for relation op",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "agents"
                ],
                "summary": "List agents available for relation op",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "agent id",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "keyword (%val%)",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "prev",
                            "next"
                        ],
                        "type": "string",
                        "description": "prev or next",
                        "name": "type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "number of agents in a page",
                        "name": "number",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page sequence number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swaggo.GetRelationableAgentsResp"
                        }
                    }
                }
            }
        },
        "/event": {
            "get": {
                "description": "get events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "List Events",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "src agent id. Don't include in request if you don't specify it",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "number of events in a page",
                        "name": "number",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "page sequence number",
                        "name": "page",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/swaggo.GetEventListResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_Web-Engineering-XDU_Project-Backend_app_service_agent_system.Message": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "models.AgentDetail": {
            "type": "object",
            "properties": {
                "allowInput": {
                    "type": "boolean",
                    "example": false
                },
                "allowOutput": {
                    "type": "boolean",
                    "example": true
                },
                "createAt": {
                    "type": "string",
                    "example": "2023-04-11T05:07:53+08:00"
                },
                "description": {
                    "type": "string",
                    "example": "I'm a schedule agent"
                },
                "enable": {
                    "type": "boolean",
                    "example": true
                },
                "eventForever": {
                    "type": "boolean",
                    "example": false
                },
                "eventMaxAge": {
                    "type": "integer",
                    "example": 0
                },
                "id": {
                    "type": "integer",
                    "example": 8848
                },
                "name": {
                    "type": "string",
                    "example": "5s timer"
                },
                "propJsonStr": {
                    "type": "string",
                    "example": "{\"cron\":\"*/5 * * * * *\"}"
                },
                "typeId": {
                    "type": "integer",
                    "example": 1
                },
                "typeName": {
                    "type": "string",
                    "example": "Schedule Agent"
                }
            }
        },
        "models.AgentIdAndName": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.AgentRelation": {
            "type": "object",
            "properties": {
                "dstAgentId": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "srcAgentId": {
                    "type": "integer"
                }
            }
        },
        "models.Event": {
            "type": "object",
            "properties": {
                "contentHash": {
                    "type": "string",
                    "example": "47ed5d26b86a7519"
                },
                "createAt": {
                    "type": "string",
                    "example": "2023-04-11T05:07:53+08:00"
                },
                "deleteAt": {
                    "type": "string",
                    "example": "2023-04-11T06:07:53+08:00"
                },
                "error": {
                    "type": "boolean",
                    "example": false
                },
                "id": {
                    "type": "integer",
                    "example": 15
                },
                "jsonStr": {
                    "type": "string",
                    "example": "{\"ip_without_dot\":\"11125117081\",\"ip\":\"111.251.170.81\",\"latitude\":\"25.0504\"}"
                },
                "log": {
                    "type": "string",
                    "example": ""
                },
                "srcAgentId": {
                    "type": "integer",
                    "example": 1145
                }
            }
        },
        "service.dryRunParams": {
            "type": "object",
            "properties": {
                "agentPropJsonStr": {
                    "type": "string"
                },
                "agentTypeId": {
                    "type": "integer"
                },
                "event": {
                    "$ref": "#/definitions/github_com_Web-Engineering-XDU_Project-Backend_app_service_agent_system.Message"
                }
            }
        },
        "service.setAgentRelationParams": {
            "type": "object",
            "properties": {
                "agentId": {
                    "type": "integer"
                },
                "dsts": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "srcs": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "swaggo.DryRunResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "msg": {
                    "type": "string",
                    "example": "ok"
                },
                "outputEvent": {
                    "type": "string"
                }
            }
        },
        "swaggo.GetAgentListResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "msg": {
                    "type": "string",
                    "example": "ok"
                },
                "result": {
                    "$ref": "#/definitions/swaggo.GetAgentListResponseResult"
                }
            }
        },
        "swaggo.GetAgentListResponseResult": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.AgentDetail"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "swaggo.GetEventListResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "msg": {
                    "type": "string",
                    "example": "ok"
                },
                "result": {
                    "$ref": "#/definitions/swaggo.GetEventListResponseResult"
                }
            }
        },
        "swaggo.GetEventListResponseResult": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Event"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "swaggo.GetRelationableAgentsResp": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "msg": {
                    "type": "string",
                    "example": "ok"
                },
                "result": {
                    "$ref": "#/definitions/swaggo.GetRelationableAgentsRespResult"
                }
            }
        },
        "swaggo.GetRelationableAgentsRespResult": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.AgentIdAndName"
                    }
                },
                "count": {
                    "type": "integer"
                },
                "totalCount": {
                    "type": "integer"
                }
            }
        },
        "swaggo.GetRelationsForEditResp": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "msg": {
                    "type": "string",
                    "example": "ok"
                },
                "result": {
                    "type": "object",
                    "properties": {
                        "dsts": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AgentIdAndName"
                            }
                        },
                        "srcs": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.AgentIdAndName"
                            }
                        }
                    }
                }
            }
        },
        "swaggo.GetRelationsResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "msg": {
                    "type": "string",
                    "example": "ok"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.AgentRelation"
                    }
                }
            }
        },
        "swaggo.NewAgentResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "msg": {
                    "type": "string",
                    "example": "ok"
                },
                "result": {
                    "$ref": "#/definitions/swaggo.NewAgentResponseResult"
                }
            }
        },
        "swaggo.NewAgentResponseResult": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "swaggo.StateInfo": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "msg": {
                    "type": "string",
                    "example": "ok"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}